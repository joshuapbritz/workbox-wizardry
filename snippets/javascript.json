{
    // Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and 
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
    // same ids are connected.
    // Example:
    // "Print to console": {
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "Update the workbox config": {
        "prefix": "_s1",
        "body": [
            "module.exports = {",
            "   \"globDirectory\": \"build/default\",",
            "   \"globPatterns\": [",
            "     \"**/*.{html,js}\"",
            "   ],",
            "   \"swDest\": \"build/default/sw.js\"",
            "  };"
        ],
        "description": "Update the workbox config"
    },
    "Initial service worker template code": {
        "prefix": "_s3",
        "body": [
            "importScripts(\"https://storage.googleapis.com/workbox-cdn/releases/3.6.2/workbox-sw.js\");",
            "",
            "const precacheManifest = [];",
            "",
            "workbox.precaching.suppressWarnings();",
            "workbox.precaching.precacheAndRoute(precacheManifest);",
        ],
        "description": "Initial service worker template code"
    },
    "Update the workbox config for the template": {
        "prefix": "_s4",
        "body": [
            "\"swSrc\": \"src/sw.js\",",
            "\"injectionPointRegexp\": /(const precacheManifest = )\\[\\](;)/"
        ],
        "description": "Update the workbox config for the template"
    },
    "Runtime caching of images": {
        "prefix": "_s5",
        "body": [
            "workbox.routing.registerRoute(",
            "  /\\.(?:png|gif|jpg|jpeg|svg)$/,",
            "  workbox.strategies.cacheFirst({",
            "    cacheName: 'images'",
            "  }),",
            ");",
        ],
        "description": "Runtime caching of images "
    },
    "Add the expiration plugin": {
        "prefix": "_s6",
        "body": [
            "plugins: [",
            "  new workbox.expiration.Plugin({",
            "    maxEntries: 60,",
            "    maxAgeSeconds: 30 * 24 * 60 * 60, // 30 Days",
            "  }),",
            "]",
        ],
        "description": "Add the expiration plugin "
    },
    "Cache the data using staleWhileRevalidate": {
        "prefix": "_s7",
        "body": [
            "workbox.routing.registerRoute(",
            "  /\\.json$/,",
            "  workbox.strategies.staleWhileRevalidate({",
            "    cacheName: 'data'",
            "  }),",
            ");",
        ],
        "description": "Cache the data using staleWhileRevalidate "
    },
    "Listen to the install event": {
        "prefix": "_s8",
        "body": [
            "self.addEventListener('install', (event) => {",
            "    console.log('Service worker is being installed.');",
            "});",
        ],
        "description": "Listen to the install event "
    },
    "Send the prompt to reload method": {
        "prefix": "_s9",
        "body": [
            "const channel = new BroadcastChannel('service-worker-channel');",
            "channel.postMessage({ promptToReload: true });"
        ],
        "description": "Send the prompt to reload method "
    },
    "Listen to the promptToReload": {
        "prefix": "_s10",
        "body": [
            "const channel = new BroadcastChannel('service-worker-channel');",
            "channel.onmessage = (message) => {",
            "  if (message.data.promptToReload) {",
            "    if (confirm('Updates available. Would you like to reload?')) {",
            "      channel.postMessage({ skipWaiting: true });",
            "    };",
            "  }",
            "}",
        ],
        "description": "Listen to the promptToReload "
    },
    "Listen to the skipWaiting message": {
        "prefix": "_s10",
        "body": [
            "channel.onmessage = (message) => {",
            "    if (message.data.skipWaiting) {",
            "        console.log('Skipping waiting and installing service worker.');",
            "        self.skipWaiting();",
            "    }",
            "};",
        ],
        "description": "Listen to the skipWaiting message "
    },
    "Change the underlying service worker": {
        "prefix": "_s10",
        "body": [
            "navigator.serviceWorker.addEventListener('controllerchange', () => {",
            "    window.location.reload();",
            "});",
        ],
        "description": "Change the underlying service worker "
    },
    "Add the background sync queue": {
        "prefix": "_s11",
        "body": [
            "const queue = new workbox.backgroundSync.Queue('pending-orders');",
            "",
            "self.addEventListener('fetch', (event) => {",
            "    if (event.request.method === 'POST' && event.request.url.match(/.*orders/)) {",
            "        let response = fetch(event.request.clone())",
            "            .catch((err) => {",
            "                return queue.addRequest(event.request.clone())",
            "                    .then(() => new Response(JSON.stringify({ success: true }), { status: 200 }))",
            "            });",
            "",
            "        event.respondWith(response);",
            "    }",
            "});",
        ],
        "description": "Add the background sync queue "
    }
}